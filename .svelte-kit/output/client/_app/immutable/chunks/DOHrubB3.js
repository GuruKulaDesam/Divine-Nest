var f=Object.defineProperty;var h=(e,i,t)=>i in e?f(e,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[i]=t;var a=(e,i,t)=>h(e,typeof i!="symbol"?i+"":i,t);class y{constructor(){a(this,"audioContext",null);a(this,"currentSource",null);a(this,"gainNode",null);a(this,"isPlaying",!1);a(this,"currentBuffer",null);this.initializeAudioContext()}async initializeAudioContext(){try{this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.gainNode=this.audioContext.createGain(),this.gainNode.connect(this.audioContext.destination)}catch(i){throw console.error("Failed to initialize audio context:",i),i}}async playAudio(i,t={}){var n;if((!this.audioContext||!this.gainNode)&&await this.initializeAudioContext(),!this.audioContext||!this.gainNode)throw new Error("Audio context not available");try{this.audioContext.state==="suspended"&&await this.audioContext.resume(),this.stopAudio(),this.currentSource=this.audioContext.createBufferSource(),this.currentSource.buffer=i,this.currentBuffer=i;const r=Math.max(0,Math.min(t.volume??1,1));this.gainNode.gain.value=r,this.currentSource.connect(this.gainNode),this.currentSource.onended=()=>{var u;this.isPlaying=!1,(u=t.onEnded)==null||u.call(t)},t.loop&&(this.currentSource.loop=!0),this.currentSource.start(),this.isPlaying=!0}catch(r){throw console.error("Audio playback failed:",r),this.isPlaying=!1,(n=t.onError)==null||n.call(t,r),r}}stopAudio(){if(this.currentSource){try{this.currentSource.stop()}catch{}this.currentSource=null}this.isPlaying=!1}pauseAudio(){this.audioContext&&this.isPlaying&&(this.audioContext.suspend(),this.isPlaying=!1)}resumeAudio(){this.audioContext&&!this.isPlaying&&(this.audioContext.resume(),this.isPlaying=!0)}setVolume(i){this.gainNode&&(this.gainNode.gain.value=Math.max(0,Math.min(i,1)))}get isCurrentlyPlaying(){return this.isPlaying}get currentAudioBuffer(){return this.currentBuffer}getDuration(){var i;return((i=this.currentBuffer)==null?void 0:i.duration)??0}getCurrentTime(){return!this.audioContext||!this.currentSource?0:this.audioContext.currentTime}}let c=null;function s(){if(typeof window>"u")throw new Error("AudioPlayer can only be used in browser environment");return c||(c=new y),c}async function g(e,i){return typeof window>"u"?void 0:s().playAudio(e,i)}function A(){if(typeof window>"u")return;s().stopAudio()}function x(){if(typeof window>"u")return;s().pauseAudio()}function C(){if(typeof window>"u")return;s().resumeAudio()}function m(e){if(typeof window>"u")return;s().setVolume(e)}async function p(e={}){if(typeof window>"u")throw new Error("Microphone recording is only available in browser environment");return new Promise((i,t)=>{navigator.mediaDevices.getUserMedia({audio:!0}).then(n=>{const r=new MediaRecorder(n),u=[];r.ondataavailable=d=>{var o;u.push(d.data),(o=e.onData)==null||o.call(e,d.data)},r.onstop=()=>{const d=new Blob(u,{type:"audio/wav"});i(d),n.getTracks().forEach(o=>o.stop())},r.onerror=d=>{var l;const o=new Error("Recording failed");(l=e.onError)==null||l.call(e,o),t(o)},r.start(),e.duration&&setTimeout(()=>{r.stop()},e.duration*1e3)}).catch(n=>{var r;console.error("Microphone access denied:",n),(r=e.onError)==null||r.call(e,n),t(n)})})}async function b(e){if(typeof window>"u")throw new Error("Audio processing is only available in browser environment");const i=await e.arrayBuffer();return await new(window.AudioContext||window.webkitAudioContext)().decodeAudioData(i)}export{C as a,b,m as c,x as d,g as p,p as r,A as s};
