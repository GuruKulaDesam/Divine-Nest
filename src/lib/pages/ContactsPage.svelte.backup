<script>
  import { onMount } from "svelte";
  import { currentRoute } from "../router.js";
  import Icon from "@iconify/svelte";

  // Import contacts data
  import { db } from "../data/database.js";

  let activeSection = "overview";
  let selectedCategory = "all";
  let contacts = [];
  let searchQuery = "";

  // Calculate current section info
  $: currentSection = ContactsSections.find((s) => s.id === activeSection);

  // Handle URL-based section routing
  $: {
    const path = $currentRoute;
    if (path.startsWith("/contacts/")) {
      const section = path.split("/")[2];
      if (section && ContactsSections.find((s) => s.id === section)) {
        activeSection = section;
      }
    }
  }

  function switchSection(sectionId) {
    activeSection = sectionId;
    window.history.pushState({}, "", `/contacts/${sectionId}`);
  }

  function switchCategory(categoryId) {
    selectedCategory = categoryId;
  }

  // Contacts Sections for navigation
  const ContactsSections = [
    {
      id: "overview",
      name: "Contacts Overview",
      tamil: "‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç ‡Æï‡Æ£‡Øç‡Æ£‡Øã‡Æü‡Øç‡Æü‡ÆÆ‡Øç",
      icon: "heroicons:phone",
      color: "green"
    },
    {
      id: "family",
      name: "Family Contacts",
      tamil: "‡Æï‡ØÅ‡Æü‡ØÅ‡ÆÆ‡Øç‡Æ™ ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç",
      icon: "heroicons:users",
      color: "blue"
    },
    {
      id: "professional",
      name: "Service Providers",
      tamil: "‡Æö‡Øá‡Æµ‡Øà ‡Æµ‡Æ¥‡Æô‡Øç‡Æï‡ØÅ‡Æ®‡Æ∞‡Øç‡Æï‡Æ≥‡Øç",
      icon: "heroicons:wrench",
      color: "purple"
    },
    {
      id: "emergency",
      name: "Emergency Contacts",
      tamil: "‡ÆÖ‡Æµ‡Æö‡Æ∞ ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç",
      icon: "heroicons:exclamation-triangle",
      color: "red"
    }
  ];

  // Contact Categories
  const ContactCategories = {
    all: { name: "All Contacts", tamil: "‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡ØÅ ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡ØÅ‡ÆÆ‡Øç", count: 0 },
    family: { name: "Family", tamil: "‡Æï‡ØÅ‡Æü‡ØÅ‡ÆÆ‡Øç‡Æ™‡ÆÆ‡Øç", count: 0 },
    friends: { name: "Friends", tamil: "‡Æ®‡Æ£‡Øç‡Æ™‡Æ∞‡Øç‡Æï‡Æ≥‡Øç", count: 0 },
    professional: { name: "Professional", tamil: "‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç‡ÆÆ‡ØÅ‡Æ±‡Øà", count: 0 },
    neighbors: { name: "Neighbors", tamil: "‡ÆÖ‡Æ£‡Øç‡Æü‡Øà ‡Æµ‡ØÄ‡Æü‡Øç‡Æü‡Ææ‡Æ∞‡Øç", count: 0 },
    other: { name: "Other", tamil: "‡ÆÆ‡Æ±‡Øç‡Æ±‡Æµ‡Øà", count: 0 }
  };

  $: filteredContacts = contacts.filter((contact) => {
    const matchesSearch = contact.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         contact.phone.includes(searchQuery) ||
                         contact.email?.toLowerCase().includes(searchQuery.toLowerCase());

    const matchesCategory = selectedCategory === "all" || contact.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  // Calculate stats
  $: {
    // Reset counts
    Object.keys(ContactCategories).forEach(key => {
      ContactCategories[key].count = 0;
    });

    // Count contacts by category
    contacts.forEach(contact => {
      if (ContactCategories[contact.category]) {
        ContactCategories[contact.category].count++;
      }
    });

    ContactCategories.all.count = contacts.length;
  }

  onMount(async () => {
    await loadContacts();
  });

  async function loadContacts() {
    try {
      contacts = await db.contacts.toArray();
      console.log("Loaded contacts:", contacts.length);

      // If no contacts exist, populate with local service providers
      if (contacts.length === 0) {
        console.log("No contacts found, populating with local contacts...");
        await populateLocalContacts();
        contacts = await db.contacts.toArray();
        console.log("After population, contacts count:", contacts.length);
      }
    } catch (error) {
      console.error("Error loading contacts:", error);
    }
  }

  async function populateLocalContacts() {
    const localServiceContacts = [
      { name: "Suresh Electricals", phone: "+91-422-2468140", email: "suresh.electricals@gmail.com", address: "Kovaipudur Main Road", category: "professional", relationship: "Electrician", notes: "Reliable electrical services, available 24/7 for emergencies" },
      { name: "Ravi Plumbing", phone: "+91-422-2468141", email: "ravi.plumbing@gmail.com", address: "Peelamedu Extension", category: "professional", relationship: "Plumber", notes: "Expert plumbing services for all household needs" },
      { name: "Dr. Meena Dental", phone: "+91-422-2468137", email: "meena.dental@gmail.com", address: "Kovaipudur Main Road", category: "professional", relationship: "Dentist", notes: "Family dental care, root canal specialist" },
      { name: "City Pharmacy", phone: "+91-422-2468138", email: "city.pharma@gmail.com", address: "Near Kovaipudur Bus Stand", category: "professional", relationship: "Pharmacy", notes: "24/7 pharmacy, home delivery available" },
      { name: "Anand Grocery", phone: "+91-422-2468147", email: "anand.grocery@gmail.com", address: "Kovaipudur Main Road", category: "professional", relationship: "Grocery Store", notes: "Fresh vegetables, daily essentials, home delivery" },
      { name: "Priya Tuition Center", phone: "+91-422-2468146", email: "priya.tuition@gmail.com", address: "Kovaipudur", category: "professional", relationship: "Maths Tuition", notes: "Classes for grades 1-12, experienced teachers" },
      { name: "Kovaipudur Police Station", phone: "100", email: "kovai.police@tn.gov.in", address: "Kovaipudur Police Station", category: "professional", relationship: "Police Emergency", notes: "Local police station for Kovaipudur area" },
      { name: "Sri Krishna Bakery", phone: "+91-422-2468148", email: "sri.krishna.bakery@gmail.com", address: "Near Kovaipudur Temple", category: "professional", relationship: "Bakery", notes: "Fresh breads, cakes, and traditional sweets" },
      { name: "Kumar AC Service", phone: "+91-422-2468142", email: "kumar.ac@gmail.com", address: "Kovaipudur", category: "professional", relationship: "AC Technician", notes: "AC repair, installation, and maintenance services" },
      { name: "Lakshmi House Cleaning", phone: "+91-422-2468144", email: "lakshmi.cleaning@gmail.com", address: "Kovaipudur Area", category: "professional", relationship: "House Cleaning", notes: "Professional cleaning services, deep cleaning available" },
      { name: "Vijay Electronics", phone: "+91-422-2468143", email: "vijay.electronics@gmail.com", address: "Kovaipudur Market", category: "professional", relationship: "Electronics Repair", notes: "TV, fridge, washing machine repair services" },
      { name: "Ram Garden Services", phone: "+91-422-2468145", email: "ram.garden@gmail.com", address: "Coimbatore Rural", category: "professional", relationship: "Gardener", notes: "Garden maintenance, lawn mowing, plant care" },
    ];

    for (const contact of localServiceContacts) {
      await db.contacts.add({
        ...contact,
        id: Date.now() + Math.random(),
        createdAt: new Date(),
        avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(contact.name)}&background=random`,
      });
    }
  }
</script>

<!-- Contacts & Directory Suite Header -->
<div class="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100">
  <div class="container mx-auto px-4 py-6">
    <!-- Header Section -->
    <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
      <div class="flex items-center justify-between mb-4">
        <div class="flex items-center space-x-4">
          <div class="bg-green-100 p-3 rounded-lg">
            <Icon icon="heroicons:phone" class="w-8 h-8 text-green-600" />
          </div>
          <div>
            <h1 class="text-3xl font-bold text-gray-900">üìû Contacts & Directory</h1>
            <p class="text-lg text-gray-600">‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç & ‡ÆÖ‡Æü‡Øà‡Æµ‡ØÅ</p>
            <p class="text-sm text-gray-500">Manage family contacts and local service providers</p>
          </div>
        </div>

        <!-- Category Selector -->
        <div class="flex space-x-2">
          {#each Object.entries(ContactCategories) as [categoryId, category]}
            <button on:click={() => switchCategory(categoryId)} class="flex items-center space-x-2 px-4 py-2 rounded-lg transition-all {selectedCategory === categoryId ? 'bg-green-500 text-white shadow-md' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}">
              <Icon icon="heroicons:user-group" class="w-5 h-5" />
              <span class="font-medium">{category.name}</span>
              <span class="text-sm opacity-75">({category.count})</span>
            </button>
          {/each}
        </div>
      </div>

      <!-- Quick Stats Dashboard -->
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div class="bg-gradient-to-r from-green-500 to-green-600 p-4 rounded-lg text-white">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm opacity-90">Total Contacts</p>
              <p class="text-2xl font-bold">{ContactCategories.all.count}</p>
              <p class="text-xs opacity-75">‡ÆÆ‡Øä‡Æ§‡Øç‡Æ§ ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç</p>
            </div>
            <Icon icon="heroicons:phone" class="w-8 h-8 opacity-80" />
          </div>
        </div>

        <div class="bg-gradient-to-r from-blue-500 to-blue-600 p-4 rounded-lg text-white">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm opacity-90">Family</p>
              <p class="text-2xl font-bold">{ContactCategories.family.count}</p>
              <p class="text-xs opacity-75">‡Æï‡ØÅ‡Æü‡ØÅ‡ÆÆ‡Øç‡Æ™‡ÆÆ‡Øç</p>
            </div>
            <Icon icon="heroicons:users" class="w-8 h-8 opacity-80" />
          </div>
        </div>

        <div class="bg-gradient-to-r from-purple-500 to-purple-600 p-4 rounded-lg text-white">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm opacity-90">Services</p>
              <p class="text-2xl font-bold">{ContactCategories.professional.count}</p>
              <p class="text-xs opacity-75">‡Æö‡Øá‡Æµ‡Øà‡Æï‡Æ≥‡Øç</p>
            </div>
            <Icon icon="heroicons:wrench" class="w-8 h-8 opacity-80" />
          </div>
        </div>

        <div class="bg-gradient-to-r from-red-500 to-red-600 p-4 rounded-lg text-white">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm opacity-90">Emergency</p>
              <p class="text-2xl font-bold">{contacts.filter(c => c.category === 'emergency').length}</p>
              <p class="text-xs opacity-75">‡ÆÖ‡Æµ‡Æö‡Æ∞‡ÆÆ‡Øç</p>
            </div>
            <Icon icon="heroicons:exclamation-triangle" class="w-8 h-8 opacity-80" />
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content Area -->
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
      <!-- Sidebar Navigation -->
      <div class="lg:col-span-1">
        <div class="bg-white rounded-xl shadow-lg p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <Icon icon="heroicons:bars-3" class="w-5 h-5 mr-2" />
            Contact Sections
            <span class="ml-2 text-sm text-gray-500">‡Æ™‡Æø‡Æ∞‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç</span>
          </h3>

          <nav class="space-y-2">
            {#each ContactsSections as section}
              <button on:click={() => switchSection(section.id)} class="w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-all text-left {activeSection === section.id ? `bg-${section.color}-100 text-${section.color}-700 border-l-4 border-${section.color}-500` : 'text-gray-600 hover:bg-gray-50'}">
                <Icon icon={section.icon} class="w-5 h-5 flex-shrink-0" />
                <div class="flex-1 min-w-0">
                  <p class="font-medium truncate">{section.name}</p>
                  <p class="text-xs opacity-75 truncate">{section.tamil}</p>
                </div>
                {#if activeSection === section.id}
                  <Icon icon="heroicons:chevron-right" class="w-4 h-4" />
                {/if}
              </button>
            {/each}
          </nav>

          <!-- Search Bar -->
          <div class="mt-6 pt-6 border-t border-gray-200">
            <div class="relative">
              <Icon icon="heroicons:magnifying-glass" class="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="text"
                placeholder="Search contacts..."
                bind:value={searchQuery}
                class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
              />
            </div>
          </div>
        </div>
      </div>

      <!-- Main Content -->
      <div class="lg:col-span-3">
        <div class="bg-white rounded-xl shadow-lg p-6">
          {#if activeSection === "overview"}
            <!-- Overview Dashboard -->
            <div class="space-y-6">
              <div class="flex items-center justify-between">
                <h2 class="text-2xl font-bold text-gray-900">Contacts Overview</h2>
                <span class="text-sm text-gray-500">‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç ‡Æï‡Æ£‡Øç‡Æ£‡Øã‡Æü‡Øç‡Æü‡ÆÆ‡Øç</span>
              </div>

              <!-- Recent Contacts -->
              {#if filteredContacts.length > 0}
                <div class="bg-green-50 rounded-lg p-4">
                  <h3 class="text-lg font-semibold text-green-900 mb-3">Recent Contacts</h3>
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {#each filteredContacts.slice(0, 6) as contact}
                      <div class="bg-white p-4 rounded-lg shadow-sm">
                        <div class="flex items-center space-x-3 mb-2">
                          <img src={contact.avatar} alt={contact.name} class="w-10 h-10 rounded-full" />
                          <div class="flex-1">
                            <h4 class="font-semibold text-gray-900">{contact.name}</h4>
                            <p class="text-sm text-gray-600">{contact.relationship || contact.category}</p>
                          </div>
                        </div>
                        <div class="text-sm text-gray-600">
                          <p>üìû {contact.phone}</p>
                          {#if contact.email}
                            <p>‚úâÔ∏è {contact.email}</p>
                          {/if}
                        </div>
                      </div>
                    {/each}
                  </div>
                </div>
              {/if}

              <!-- Emergency Contacts -->
              <div class="bg-red-50 rounded-lg p-4">
                <h3 class="text-lg font-semibold text-red-900 mb-3">Emergency Contacts</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {#each contacts.filter(c => c.category === 'emergency' || c.relationship?.toLowerCase().includes('police') || c.relationship?.toLowerCase().includes('hospital')) as contact}
                    <div class="bg-white p-4 rounded-lg shadow-sm border-l-4 border-red-500">
                      <div class="flex items-center space-x-3 mb-2">
                        <Icon icon="heroicons:exclamation-triangle" class="w-6 h-6 text-red-600" />
                        <div>
                          <h4 class="font-semibold text-gray-900">{contact.name}</h4>
                          <p class="text-sm text-gray-600">{contact.relationship}</p>
                        </div>
                      </div>
                      <p class="text-lg font-bold text-red-600">{contact.phone}</p>
                    </div>
                  {/each}
                </div>
              </div>
            </div>

          {:else if activeSection === "family"}
            <!-- Family Contacts -->
            <div class="space-y-4">
              <h2 class="text-2xl font-bold text-gray-900">Family Contacts</h2>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                {#each contacts.filter(c => c.category === 'family') as contact}
                  <div class="bg-blue-50 p-4 rounded-lg">
                    <div class="flex items-center space-x-3 mb-3">
                      <img src={contact.avatar} alt={contact.name} class="w-12 h-12 rounded-full" />
                      <div>
                        <h3 class="font-semibold text-gray-900">{contact.name}</h3>
                        <p class="text-sm text-gray-600">{contact.relationship}</p>
                      </div>
                    </div>
                    <div class="space-y-1 text-sm">
                      <p>üìû {contact.phone}</p>
                      {#if contact.email}<p>‚úâÔ∏è {contact.email}</p>{/if}
                      {#if contact.address}<p>üè† {contact.address}</p>{/if}
                    </div>
                  </div>
                {/each}
              </div>
            </div>

          {:else if activeSection === "professional"}
            <!-- Service Providers -->
            <div class="space-y-4">
              <h2 class="text-2xl font-bold text-gray-900">Service Providers</h2>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                {#each contacts.filter(c => c.category === 'professional') as contact}
                  <div class="bg-purple-50 p-4 rounded-lg">
                    <div class="flex items-center space-x-3 mb-3">
                      <img src={contact.avatar} alt={contact.name} class="w-12 h-12 rounded-full" />
                      <div>
                        <h3 class="font-semibold text-gray-900">{contact.name}</h3>
                        <p class="text-sm text-gray-600">{contact.relationship}</p>
                      </div>
                    </div>
                    <div class="space-y-1 text-sm">
                      <p>üìû {contact.phone}</p>
                      {#if contact.email}<p>‚úâÔ∏è {contact.email}</p>{/if}
                      {#if contact.address}<p>üè† {contact.address}</p>{/if}
                      {#if contact.notes}<p class="text-xs text-gray-500 mt-2">{contact.notes}</p>{/if}
                    </div>
                  </div>
                {/each}
              </div>
            </div>

          {:else if activeSection === "emergency"}
            <!-- Emergency Contacts -->
            <div class="space-y-4">
              <h2 class="text-2xl font-bold text-gray-900">Emergency Contacts</h2>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                {#each contacts.filter(c => c.category === 'emergency' || c.relationship?.toLowerCase().includes('police') || c.relationship?.toLowerCase().includes('hospital') || c.relationship?.toLowerCase().includes('fire') || c.relationship?.toLowerCase().includes('ambulance')) as contact}
                  <div class="bg-red-50 p-4 rounded-lg border-l-4 border-red-500">
                    <div class="flex items-center space-x-3 mb-3">
                      <Icon icon="heroicons:exclamation-triangle" class="w-8 h-8 text-red-600" />
                      <div>
                        <h3 class="font-semibold text-gray-900">{contact.name}</h3>
                        <p class="text-sm text-gray-600">{contact.relationship}</p>
                      </div>
                    </div>
                    <div class="space-y-2">
                      <p class="text-xl font-bold text-red-600">{contact.phone}</p>
                      {#if contact.address}<p class="text-sm text-gray-600">üè† {contact.address}</p>{/if}
                      {#if contact.notes}<p class="text-xs text-gray-500 mt-2">{contact.notes}</p>{/if}
                    </div>
                  </div>
                {/each}
              </div>
            </div>

          {:else}
            <div class="text-center py-12">
              <Icon icon="heroicons:phone" class="w-16 h-16 text-green-400 mx-auto mb-4" />
              <h3 class="text-xl font-semibold text-gray-900 mb-2">Section Coming Soon</h3>
              <p class="text-gray-600">This contacts section is under development.</p>
            </div>
          {/if}
        </div>
      </div>
    </div>
  </div>
</div>
    } catch (error) {
      console.error("Error saving contact:", error);
    }
  }

  async function importContacts() {
    isImporting = true;
    importProgress = 0;

    try {
      if (importSource === "phone") {
        await importFromPhoneContacts();
      } else if (importSource === "google") {
        await importFromGoogleContacts();
      } else if (importSource === "csv") {
        await importFromCSV();
      }
    } catch (error) {
      console.error("Error importing contacts:", error);
      alert("Error importing contacts. Please try again.");
    } finally {
      isImporting = false;
      importProgress = 0;
      showImportModal = false;
    }
  }

  async function importFromPhoneContacts() {
    // Simulate phone contact import (in real app, would use Contacts API)
    const sampleContacts = [
      { name: "Rajesh Kumar", phone: "+91-98765-43210", category: "professional", relationship: "Family Doctor" },
      { name: "Priya Sharma", phone: "+91-87654-32109", category: "friends", relationship: "School Friend" },
      { name: "Suresh Electricals", phone: "+91-422-2468135", category: "professional", relationship: "Electrician" },
      { name: "Lakshmi Store", phone: "+91-422-2468136", category: "professional", relationship: "Grocery Store" },
      { name: "Dr. Meena Dental", phone: "+91-422-2468137", category: "professional", relationship: "Dentist" },
    ];

    for (let i = 0; i < sampleContacts.length; i++) {
      const contact = sampleContacts[i];
      await db.contacts.add({
        ...contact,
        id: Date.now() + i,
        createdAt: new Date(),
        avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(contact.name)}&background=random`,
      });
      importProgress = ((i + 1) / sampleContacts.length) * 100;
      await new Promise((resolve) => setTimeout(resolve, 500)); // Simulate delay
    }

    await loadContacts();
  }

  async function importFromGoogleContacts() {
    // Simulate Google contacts import
    alert("Google Contacts import would require OAuth authentication. This is a demo implementation.");
    const sampleContacts = [
      { name: "Arun Kumar", phone: "+91-95555-12345", email: "arun.kumar@email.com", category: "friends" },
      { name: "Kavita Patel", phone: "+91-94444-67890", email: "kavita.patel@email.com", category: "professional" },
      { name: "Ravi Electronics", phone: "+91-422-2468138", email: "ravi.electronics@gmail.com", category: "professional", relationship: "Electronics Repair" },
    ];

    for (let i = 0; i < sampleContacts.length; i++) {
      const contact = sampleContacts[i];
      await db.contacts.add({
        ...contact,
        id: Date.now() + i,
        createdAt: new Date(),
        avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(contact.name)}&background=random`,
      });
      importProgress = ((i + 1) / sampleContacts.length) * 100;
      await new Promise((resolve) => setTimeout(resolve, 500));
    }

    await loadContacts();
  }

  async function importFromCSV() {
    // Create a file input for CSV upload
    const input = document.createElement("input");
    input.type = "file";
    input.accept = ".csv";
    input.onchange = async (e) => {
      const file = e.target.files[0];
      if (file) {
        const text = await file.text();
        const rows = text.split("\n").filter((row) => row.trim());
        const headers = rows[0].split(",").map((h) => h.trim().toLowerCase());

        for (let i = 1; i < rows.length; i++) {
          const values = rows[i].split(",").map((v) => v.trim());
          if (values.length >= 2) {
            const contact = {
              name: values[0] || "",
              phone: values[1] || "",
              email: values[2] || "",
              category: "other",
              id: Date.now() + i,
              createdAt: new Date(),
              avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(values[0])}&background=random`,
            };
            await db.contacts.add(contact);
          }
          importProgress = (i / (rows.length - 1)) * 100;
        }
        await loadContacts();
      }
    };
    input.click();
  }

  async function checkDatabase() {
    try {
      const allContacts = await db.contacts.toArray();
      console.log("All contacts in database:", allContacts);
      alert(`Database contains ${allContacts.length} contacts. Check console for details.`);
      await loadContacts(); // Refresh the display
    } catch (error) {
      console.error("Error checking database:", error);
      alert("Error checking database: " + error.message);
    }
  }

  function resetForm() {
    newContact = {
      name: "",
      phone: "",
      email: "",
      address: "",
      category: "family",
      notes: "",
      relationship: "",
      avatar: "",
    };
  }

  function getCategoryIcon(category) {
    const icons = {
      family: "heroicons:heart",
      friends: "heroicons:user-group",
      professional: "heroicons:briefcase",
      neighbors: "heroicons:home",
      other: "heroicons:user",
    };
    return icons[category] || "heroicons:user";
  }

  function getCategoryColor(category) {
    const colors = {
      family: "text-red-500",
      friends: "text-blue-500",
      professional: "text-purple-500",
      neighbors: "text-green-500",
      other: "text-gray-500",
    };
    return colors[category] || "text-gray-500";
  }

  $: pageTitle = $currentRoute === "/vendors" ? "Local Vendors" : $currentRoute === "/directory" ? "Local Directory" : "Personal Contacts";

  $: pageDescription = $currentRoute === "/vendors" ? "Find local service providers and businesses" : $currentRoute === "/directory" ? "Browse local contacts and services" : "Manage your family and personal contacts";

  onMount(() => {
    document.title = pageTitle + " - Family App";
    loadContacts();
  });
</script>

<div class="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-gray-900 dark:via-blue-900/20 dark:to-purple-900/20">
  <div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-3">
          <div class="p-3 bg-gradient-to-br from-blue-500 to-purple-500 rounded-xl text-white">
            <Icon icon="heroicons:phone" class="w-8 h-8" />
          </div>
          <div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white">{pageTitle}</h1>
            <p class="text-gray-600 dark:text-gray-300">{pageDescription}</p>
          </div>
        </div>
        <div class="flex gap-3">
          <button class="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-xl font-medium transition-colors shadow-lg" on:click={() => (showImportModal = true)}>
            <Icon icon="heroicons:arrow-down-tray" class="w-5 h-5 inline mr-2" />
            Import Contacts
          </button>
          <button class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-xl font-medium transition-colors shadow-lg" on:click={() => (showAddModal = true)}>
            <Icon icon="heroicons:plus" class="w-5 h-5 inline mr-2" />
            Add Contact
          </button>
          <button class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-3 rounded-lg font-medium transition-colors shadow-sm text-sm" on:click={checkDatabase}>
            <Icon icon="heroicons:eye" class="w-4 h-4 inline mr-1" />
            Check DB
          </button>
        </div>
      </div>
    </div>

    <!-- Import Contacts Modal -->
    {#if showImportModal}
      <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto">
          <div class="p-6">
            <div class="flex items-center justify-between mb-6">
              <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Import Contacts</h2>
              <button class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200" on:click={() => (showImportModal = false)}>
                <Icon icon="heroicons:x-mark" class="w-6 h-6" />
              </button>
            </div>

            {#if isImporting}
              <div class="text-center py-8">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
                <p class="text-gray-600 dark:text-gray-300 mb-2">Importing contacts...</p>
                <div class="w-full bg-gray-200 rounded-full h-2 dark:bg-gray-700">
                  <div class="bg-blue-500 h-2 rounded-full transition-all duration-300" style="width: {importProgress}%"></div>
                </div>
                <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">{Math.round(importProgress)}% complete</p>
              </div>
            {:else}
              <div class="space-y-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Import Source</label>
                  <div class="space-y-2">
                    <label class="flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700">
                      <input type="radio" bind:group={importSource} value="phone" class="mr-3" />
                      <div class="flex items-center space-x-3">
                        <Icon icon="heroicons:device-phone-mobile" class="w-5 h-5 text-blue-500" />
                        <div>
                          <div class="font-medium text-gray-900 dark:text-white">Phone Contacts</div>
                          <div class="text-sm text-gray-500 dark:text-gray-400">Import from your phone's contact list</div>
                        </div>
                      </div>
                    </label>

                    <label class="flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700">
                      <input type="radio" bind:group={importSource} value="google" class="mr-3" />
                      <div class="flex items-center space-x-3">
                        <Icon icon="logos:google-icon" class="w-5 h-5" />
                        <div>
                          <div class="font-medium text-gray-900 dark:text-white">Google Contacts</div>
                          <div class="text-sm text-gray-500 dark:text-gray-400">Import from your Google account</div>
                        </div>
                      </div>
                    </label>

                    <label class="flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700">
                      <input type="radio" bind:group={importSource} value="csv" class="mr-3" />
                      <div class="flex items-center space-x-3">
                        <Icon icon="heroicons:document-text" class="w-5 h-5 text-green-500" />
                        <div>
                          <div class="font-medium text-gray-900 dark:text-white">CSV File</div>
                          <div class="text-sm text-gray-500 dark:text-gray-400">Upload a CSV file with contact data</div>
                        </div>
                      </div>
                    </label>
                  </div>
                </div>

                <div class="flex gap-3 pt-4">
                  <button type="button" class="flex-1 px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors" on:click={() => (showImportModal = false)}> Cancel </button>
                  <button type="button" class="flex-1 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors" on:click={importContacts}> Import </button>
                </div>
              </div>
            {/if}
          </div>
        </div>
      </div>
    {/if}
    <!-- Filters -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
      <div class="md:col-span-2">
        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Search Contacts</label>
        <input type="text" bind:value={searchQuery} placeholder="Search by name, phone, or email..." class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white" />
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Category</label>
        <select bind:value={selectedCategory} class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white">
          <option value="all">All Categories</option>
          {#each categories as category}
            <option value={category}>{category.charAt(0).toUpperCase() + category.slice(1)}</option>
          {/each}
        </select>
      </div>
    </div>

    <!-- Contacts Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {#each filteredContacts as contact (contact.id)}
        <div class="bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-2xl shadow-lg p-6 hover:shadow-xl transition-all duration-300">
          <div class="flex items-start justify-between mb-4">
            <div class="flex items-center space-x-3">
              <img src={contact.avatar} alt={contact.name} class="w-12 h-12 rounded-full object-cover" />
              <div>
                <h3 class="font-semibold text-gray-900 dark:text-white">{contact.name}</h3>
                {#if contact.relationship}
                  <p class="text-sm text-gray-500 dark:text-gray-400">{contact.relationship}</p>
                {/if}
              </div>
            </div>
            <div class="flex items-center space-x-1">
              <Icon icon={getCategoryIcon(contact.category)} class="w-4 h-4 {getCategoryColor(contact.category)}" />
              <button class="text-red-500 hover:text-red-600 p-1" on:click={() => deleteContact(contact.id)}>
                <Icon icon="heroicons:trash" class="w-4 h-4" />
              </button>
            </div>
          </div>

          <div class="space-y-2">
            {#if contact.phone}
              <div class="flex items-center space-x-2">
                <Icon icon="heroicons:phone" class="w-4 h-4 text-green-500" />
                <a href="tel:{contact.phone}" class="text-sm text-gray-600 dark:text-gray-300 hover:text-blue-500">{contact.phone}</a>
              </div>
            {/if}
            {#if contact.email}
              <div class="flex items-center space-x-2">
                <Icon icon="heroicons:envelope" class="w-4 h-4 text-blue-500" />
                <a href="mailto:{contact.email}" class="text-sm text-gray-600 dark:text-gray-300 hover:text-blue-500">{contact.email}</a>
              </div>
            {/if}
            {#if contact.address}
              <div class="flex items-center space-x-2">
                <Icon icon="heroicons:map-pin" class="w-4 h-4 text-red-500" />
                <span class="text-sm text-gray-600 dark:text-gray-300">{contact.address}</span>
              </div>
            {/if}
            {#if contact.notes}
              <div class="mt-3 p-2 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <p class="text-sm text-gray-600 dark:text-gray-300">{contact.notes}</p>
              </div>
            {/if}
          </div>
        </div>
      {/each}
    </div>

    {#if filteredContacts.length === 0}
      <div class="text-center py-12">
        <Icon icon="heroicons:user-group" class="w-16 h-16 mx-auto text-gray-400 mb-4" />
        <h3 class="text-xl font-semibold text-gray-500 dark:text-gray-400 mb-2">No contacts found</h3>
        <p class="text-gray-400 dark:text-gray-500">Add your first contact to get started</p>
      </div>
    {/if}
  </div>
</div>

<!-- Add Contact Modal -->
{#if showAddModal}
  <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto">
      <div class="p-6">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Add New Contact</h2>
          <button class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200" on:click={() => (showAddModal = false)}>
            <Icon icon="heroicons:x-mark" class="w-6 h-6" />
          </button>
        </div>

        <form on:submit|preventDefault={saveContact} class="space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="md:col-span-2">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Full Name *</label>
              <input type="text" bind:value={newContact.name} placeholder="Enter full name" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white" required />
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Phone Number *</label>
              <input type="tel" bind:value={newContact.phone} placeholder="+91-98765-43210" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white" required />
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Category</label>
              <select bind:value={newContact.category} class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white">
                {#each categories as category}
                  <option value={category}>{category.charAt(0).toUpperCase() + category.slice(1)}</option>
                {/each}
              </select>
            </div>

            <div class="md:col-span-2">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Email</label>
              <input type="email" bind:value={newContact.email} placeholder="contact@example.com" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white" />
            </div>

            <div class="md:col-span-2">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Relationship</label>
              <input type="text" bind:value={newContact.relationship} placeholder="e.g., Brother, Neighbor, Doctor" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white" />
            </div>

            <div class="md:col-span-2">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Address</label>
              <textarea bind:value={newContact.address} placeholder="Enter address" rows="2" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white"></textarea>
            </div>

            <div class="md:col-span-2">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Notes</label>
              <textarea bind:value={newContact.notes} placeholder="Any additional notes..." rows="3" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white"></textarea>
            </div>
          </div>

          <div class="flex gap-3 pt-4">
            <button type="button" class="flex-1 px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors" on:click={() => (showAddModal = false)}> Cancel </button>
            <button type="submit" class="flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"> Add Contact </button>
          </div>
        </form>
      </div>
    </div>
  </div>
{/if}
